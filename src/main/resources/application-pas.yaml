topic:
  name: users
  partitions-num: 3
  replication-factor: 1
spring:
  kafka:
    bootstrap-servers: "${vcap.services.cp.credentials.brokers}"
    properties:
      schema.registry.url: "${vcap.services.cp.credentials.sr}"
      security.protocol: SASL_PLAINTEXT
      sasl.mechanism: PLAIN
      sasl.jaas.config: "${vcap.services.cp.credentials.jaasconfig}"
      request.timeout.ms: 20000
      retry.backoff.ms: 500
    consumer:
      group-id: group_id
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
    template:
      default-topic:
logging:
  level:
    root: info

# spring cloud streams    
spring.cloud.stream.kafka.streams.binder.configuration.commit.interval.ms: 1000
spring.cloud.stream.kafka.streams:
  binder.configuration:
    default.key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
    default.value.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
  bindings.users.consumer.application-id: user-filter
spring.cloud.stream.bindings.users-filtered:
  destination: users-filtered
  producer:
    useNativeEncoding: true
spring.cloud.stream.bindings.users:
  destination: users
  consumer:
    useNativeDecoding: true
  